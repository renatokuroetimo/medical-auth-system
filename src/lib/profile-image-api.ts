import { supabase } from "./supabase";
import { isFeatureEnabled } from "./feature-flags";

class ProfileImageAPI {
  private readonly STORAGE_KEY_PREFIX = "profile_image_";

  // Delay para simular opera√ß√£o real
  private delay(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  // Verificar se a tabela existe
  async checkTableExists(): Promise<boolean> {
    if (!supabase) {
      throw new Error("Supabase n√£o est√° configurado");
    }

    try {
      const { error } = await supabase
        .from("profile_images")
        .select("id")
        .limit(1);

      return !error;
    } catch (error) {
      return false;
    }
  }

  // Verificar status de autentica√ß√£o da aplica√ß√£o (localStorage)
  async checkAuthenticationStatus(): Promise<{
    isAuthenticated: boolean;
    userId: string | null;
    error: string | null;
  }> {
    try {
      // Verificar se h√° usu√°rio logado no sistema da aplica√ß√£o
      const currentUserStr = localStorage.getItem("medical_app_current_user");

      if (!currentUserStr) {
        return {
          isAuthenticated: false,
          userId: null,
          error: "Usu√°rio n√£o autenticado na aplica√ß√£o",
        };
      }

      const currentUser = JSON.parse(currentUserStr);

      if (!currentUser || !currentUser.id) {
        return {
          isAuthenticated: false,
          userId: null,
          error: "Dados de usu√°rio inv√°lidos",
        };
      }

      return {
        isAuthenticated: true,
        userId: currentUser.id,
        error: null,
      };
    } catch (error) {
      return {
        isAuthenticated: false,
        userId: null,
        error:
          error instanceof Error
            ? error.message
            : "Erro ao verificar autentica√ß√£o",
      };
    }
  }

  // Salvar imagem de perfil
  async saveProfileImage(userId: string, imageData: string): Promise<void> {
    await this.delay(300);

    console.log(
      "üíæ Iniciando salvamento de imagem de perfil para usu√°rio:",
      userId,
    );

    if (!supabase) {
      throw new Error(
        "‚ùå Supabase n√£o est√° configurado. N√£o √© poss√≠vel salvar imagem.",
      );
    }

    // Verificar se a tabela existe
    const tableExists = await this.checkTableExists();
    if (!tableExists) {
      throw new Error(
        "‚ùå Tabela profile_images n√£o existe. Execute o script: create_profile_images_table.sql",
      );
    }

    // Verificar se o usu√°rio est√° autenticado na aplica√ß√£o
    const authStatus = await this.checkAuthenticationStatus();
    if (!authStatus.isAuthenticated) {
      throw new Error(
        "‚ùå Usu√°rio n√£o autenticado na aplica√ß√£o. Fa√ßa login primeiro.",
      );
    }

    // Verificar se o userId corresponde ao usu√°rio autenticado na aplica√ß√£o
    if (authStatus.userId !== userId) {
      throw new Error(
        `‚ùå User ID mismatch - App User: ${authStatus.userId}, Requested User: ${userId}`,
      );
    }

    try {
      // Calcular tamanho da imagem em bytes (aproximado)
      const base64Size = Math.floor(
        imageData.length * (3 / 4) - (imageData.match(/=/g) || []).length,
      );

      const imageRecord = {
        user_id: userId,
        image_data: imageData,
        mime_type: this.getMimeTypeFromBase64(imageData),
        file_size: base64Size,
        updated_at: new Date().toISOString(),
      };

      // Tentar upsert normal primeiro
      let { error } = await supabase
        .from("profile_images")
        .upsert(imageRecord, {
          onConflict: "user_id",
        });

      // Se der erro de RLS, tentar com RPC bypass
      if (error && error.message.includes("row-level security policy")) {
        console.log("‚ö†Ô∏è RLS bloqueou opera√ß√£o, tentando bypass...");

        try {
          // Tentar RPC que pode estar configurado para bypass RLS
          const { error: rpcError } = await supabase.rpc(
            "upsert_profile_image",
            {
              p_user_id: userId,
              p_image_data: imageData,
              p_mime_type: this.getMimeTypeFromBase64(imageData),
              p_file_size: base64Size,
            },
          );

          if (rpcError) {
            // Se RPC n√£o existe, tentar inser√ß√£o direta com pol√≠tica menos restritiva
            console.log(
              "‚ö†Ô∏è RPC n√£o dispon√≠vel, tentando inser√ß√£o com ID espec√≠fico...",
            );

            // Primeiro tentar deletar registro existente (se houver)
            await supabase
              .from("profile_images")
              .delete()
              .eq("user_id", userId);

            // Ent√£o inserir novo
            const { error: insertError } = await supabase
              .from("profile_images")
              .insert([imageRecord]);

            if (insertError) {
              throw new Error(`Erro ap√≥s bypass RLS: ${insertError.message}`);
            }
          }
        } catch (bypassError) {
          console.error("üí• Erro no bypass RLS:", bypassError);
          throw new Error(
            `‚ùå Erro de RLS - Execute o script fix_profile_images_rls.sql no Supabase para corrigir as pol√≠ticas de seguran√ßa. Erro original: ${error.message}`,
          );
        }
      } else if (error) {
        throw new Error(
          `‚ùå Erro ao salvar imagem no Supabase: ${error.message}`,
        );
      }

      console.log("‚úÖ Imagem salva no Supabase com sucesso");
    } catch (error) {
      console.error("üí• Erro fatal ao salvar imagem:", error);
      throw error; // Re-lan√ßa o erro ao inv√©s de fazer fallback
    }
  }

  // Carregar imagem de perfil
  async getProfileImage(userId: string): Promise<string | null> {
    await this.delay(200);

    if (!supabase) {
      console.warn("‚ö†Ô∏è Supabase n√£o configurado");
      return null;
    }

    try {
      const { data, error } = await supabase
        .from("profile_images")
        .select("image_data")
        .eq("user_id", userId)
        .single();

      if (error && error.code !== "PGRST116") {
        console.error("‚ùå Erro ao carregar imagem do Supabase:", error.message);
        return null;
      }

      if (data?.image_data) {
        console.log("‚úÖ Imagem carregada do Supabase");
        return data.image_data;
      }

      return null;
    } catch (error) {
      console.error("üí• Erro ao carregar imagem:", error);
      return null;
    }
  }

  // Remover imagem de perfil
  async removeProfileImage(userId: string): Promise<void> {
    await this.delay(300);

    if (!supabase) {
      throw new Error("‚ùå Supabase n√£o est√° configurado");
    }

    try {
      const { error } = await supabase
        .from("profile_images")
        .delete()
        .eq("user_id", userId);

      if (error) {
        throw new Error(
          `‚ùå Erro ao remover imagem do Supabase: ${error.message}`,
        );
      }

      console.log("‚úÖ Imagem removida do Supabase");
    } catch (error) {
      console.error("üí• Erro ao remover imagem:", error);
      throw error;
    }
  }

  // Extrair MIME type do base64
  private getMimeTypeFromBase64(base64: string): string {
    if (base64.startsWith("data:image/png")) {
      return "image/png";
    } else if (
      base64.startsWith("data:image/jpeg") ||
      base64.startsWith("data:image/jpg")
    ) {
      return "image/jpeg";
    } else if (base64.startsWith("data:image/gif")) {
      return "image/gif";
    } else if (base64.startsWith("data:image/webp")) {
      return "image/webp";
    }
    return "image/jpeg";
  }

  // Debug - verificar configura√ß√£o
  async debugAuthentication(): Promise<void> {
    console.log("üîç ===== DEBUG AUTENTICA√á√ÉO =====");

    const authStatus = await this.checkAuthenticationStatus();
    console.log("üîë Status de autentica√ß√£o:", authStatus);

    const tableExists = await this.checkTableExists();
    console.log("üìä Tabela profile_images existe:", tableExists);

    if (authStatus.isAuthenticated && authStatus.userId) {
      console.log("‚úÖ Usu√°rio autenticado:", authStatus.userId);
      console.log("üí° Pronto para salvar imagens no Supabase");
    } else {
      console.log("‚ùå Usu√°rio n√£o autenticado");
      console.log("üí° Fa√ßa login para salvar imagens");
    }

    console.log("üîç ===== FIM DEBUG =====");
  }
}

// Inst√¢ncia singleton
export const profileImageAPI = new ProfileImageAPI();

// NOTA: Sistema de debug removido - sem fallbacks localStorage
// Todas as opera√ß√µes agora usam apenas Supabase ou falham com erro claro

// Fun√ß√µes globais para debug (somente desenvolvimento)
declare global {
  interface Window {
    debugProfileImages: () => Promise<void>;
    testProfileAuth: () => Promise<any>;
  }
}

// Expor fun√ß√µes de debug no window para uso no console
if (typeof window !== "undefined") {
  // Fun√ß√£o de diagn√≥stico b√°sico
  window.debugProfileImages = async () => {
    console.log("üîç ===== DIAGN√ìSTICO IMAGENS DE PERFIL =====");

    console.log("1Ô∏è‚É£ CONFIGURA√á√ÉO:");
    console.log("   - Supabase configurado:", !!supabase);

    try {
      const authStatus = await profileImageAPI.checkAuthenticationStatus();
      console.log("2Ô∏è‚É£ AUTENTICA√á√ÉO:");
      console.log("   - Usu√°rio autenticado:", authStatus.isAuthenticated);
      console.log("   - User ID:", authStatus.userId);
      console.log("   - Erro:", authStatus.error);

      const tableExists = await profileImageAPI.checkTableExists();
      console.log("3Ô∏è‚É£ TABELA:");
      console.log("   - Tabela profile_images existe:", tableExists);
    } catch (error) {
      console.log("‚ùå Erro no diagn√≥stico:", error);
    }

    console.log("üîç ===== FIM DIAGN√ìSTICO =====");
  };

  // Fun√ß√£o para testar autentica√ß√£o
  window.testProfileAuth = async () => {
    try {
      const result = await profileImageAPI.checkAuthenticationStatus();
      console.log("üîë Status de autentica√ß√£o:", result);
      return result;
    } catch (error) {
      console.error("‚ùå Erro ao verificar autentica√ß√£o:", error);
      return { error: error.message };
    }
  };

  console.log("üîß Fun√ß√µes de debug dispon√≠veis:");
  console.log("   - debugProfileImages() - Diagn√≥stico b√°sico");
  console.log("   - testProfileAuth() - Testar autentica√ß√£o");
}
